<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Web" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Web" #>
<#@ output extension=".tt.cs" #>
<#



    // TODO: 修改相关配置。
    // 检索 resw 的路径。
    string ResourcePath = "Strings";
    // 检索 resw 并生成注释时使用的语言相对 ResourcePath 的路径。
    string SourceLanguagePath = "en";
    // 生成辅助类的命名空间，默认使用 "<ProjectDefaultNamespace>.LocalizedStrings"。
    string LocalizedStringsNamespace = null;
    // 生成辅助类的修饰符
    string modifier = "public";
    // 是否为默认工程，决定是否需要显式定义资源路径。
    bool IsDefaultProject = false;
    //是否对生成的代码启用调试。
    bool DebugGeneratedCode = false;



#>
<#
    var ns = LocalizedStringsNamespace ?? 
        (GetProjectDefaultNamespace()+ ".LocalizedStrings");

    // 用于存放所有 resw 的 key。
    var names = new Dictionary<string, Dictionary<string, string>>();
    var stringsPath = Path.Combine(GetProjectPath(), ResourcePath, SourceLanguagePath);
    string[] reswPaths;

    // 当前项目存在 Strings 文件夹。
    if(Directory.Exists(stringsPath))
    {
        // 获取 Strings 文件夹下所有的 .resw 文件的路径。
        reswPaths = Directory.GetFiles(stringsPath, "*.resw", SearchOption.AllDirectories);
    }
    else
    {
        reswPaths = new string[0];
    }
    foreach(string reswPath in reswPaths)
    {
        var className = Path.GetFileNameWithoutExtension(reswPath);
        var content = new Dictionary<string, string>();

        var document = new XmlDocument();
        document.Load(reswPath);

        // 获取 resw 文件中的 data 节点。
        var dataNodes = document.GetElementsByTagName("data");
        foreach(XmlElement dataNode in dataNodes)
        {
            if(dataNode != null)
            {
                var value = dataNode.GetAttribute("name");
                // key 中包含 ‘.’ 的作为控件的多语言化，不处理。
                if(value.Contains("."))
                    continue;
                content.Add(value, dataNode["value"].InnerText);
            }
        }

        if(content.Count != 0)
            names.Add(className, content);
    }

    if(!string.IsNullOrWhiteSpace(ns))
    {
#>
namespace <#=ns#>
{    
<#
    }

    foreach(var localizedClass in names)
    {
        var resourcePath = (IsDefaultProject ? "" : GetProjectAssemblyName()) + "/" + localizedClass.Key;
        if(!DebugGeneratedCode)
        {
#>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
<#
        }
        var cache = GetRandomName("_cache");
        var loader = GetRandomName("_loader");
#>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ResourceGenerator","1.0")]
    <#=modifier#> static class <#=Refine(localizedClass.Key)#>
    {
        private static readonly global::System.Collections.Generic.Dictionary<string, string> <#=cache#>
            = new global::System.Collections.Generic.Dictionary<string, string>();

        private static readonly global::Windows.ApplicationModel.Resources.ResourceLoader <#=loader#>
            = global::Windows.ApplicationModel.Resources.ResourceLoader.GetForViewIndependentUse("<#=resourcePath#>");

        public static string GetString(string resourceKey)
        {
            string value;
            if(<#=cache#>.TryGetValue(resourceKey, out value))
                return value;
            else
                return <#=cache#>[resourceKey] = <#=loader#>.GetString(resourceKey);
        }

        public static void ClearCache()
        {
            <#=cache#>.Clear();
        }
<#
        foreach(var name in localizedClass.Value)
        {
            if(string.IsNullOrWhiteSpace(name.Key))
                continue;
#>

        /// <summary>
<#
            // 转义注释序列
            var comments = new StringReader(name.Value);
            while(true)
            {
                var comment = HttpUtility.HtmlEncode(comments.ReadLine());
                if(comment == null)
                    break;
#>
        /// <para><#=comment#></para>
<#
            }
#>
        /// </summary>
        public static string <#=Refine(name.Key)#> => GetString("<#=name.Key#>");
<#
        }
#>
    }

<#
    }
    
    if(!string.IsNullOrWhiteSpace(ns))
    {
#>
}
<#
    }
#>

<#+
    // 获取当前 T4 模板所在的工程的目录。
    public string GetProjectPath()
    {
        return Host.ResolveAssemblyReference("$(ProjectDir)");
    }

    // 获取当前 T4 模板所在的工程的默认命名空间。
    public string GetProjectDefaultNamespace()
    {
        IServiceProvider serviceProvider = (IServiceProvider)this.Host;
        EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
        EnvDTE.Project project = (EnvDTE.Project)dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject;
        return project.Properties.Item("DefaultNamespace").Value.ToString();
    }

    // 获取当前 T4 模板所在的工程的程序集名称。
    public string GetProjectAssemblyName()
    {
        IServiceProvider serviceProvider = (IServiceProvider)this.Host;
        EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
        EnvDTE.Project project = (EnvDTE.Project)dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject;
        return project.Properties.Item("AssemblyName").Value.ToString();
    }

    private HashSet<string> keywords = new HashSet<string>()
    {
        "abstract",
        "as",
        "base",
        "bool",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "checked",
        "class",
        "const",
        "continue",
        "decimal",
        "default",
        "delegate",
        "do",
        "double",
        "else",
        "enum",
        "event",
        "explicit",
        "extern",
        "false",
        "finally",
        "fixed",
        "float",
        "for",
        "foreach",
        "goto",
        "if",
        "implicit",
        "in",
        "int",
        "interface",
        "internal",
        "is",
        "lock",
        "long",
        "namespace",
        "new",
        "null",
        "object",
        "operator",
        "out",
        "override",
        "params",
        "private",
        "protected",
        "public",
        "readonly",
        "ref",
        "return",
        "sbyte",
        "sealed",
        "short",
        "sizeof",
        "stackalloc",
        "static",
        "string",
        "struct",
        "switch",
        "this",
        "throw",
        "true",
        "try",
        "typeof",
        "uint",
        "ulong",
        "unchecked",
        "unsafe",
        "ushort",
        "using",
        "virtual",
        "void",
        "volatile",
        "while",
        "add",
        "alias",
        "ascending",
        "async",
        "await",
        "descending",
        "dynamic",
        "from",
        "get",
        "global",
        "group",
        "into",
        "join",
        "let",
        "orderby",
        "partial", 
        "remove",
        "select",
        "set",
        "value",
        "var",
        "where", 
        "yield"
    };

    private HashSet<string> used = new HashSet<string>()
    {
        "GetString",
        "ClearCache",
        "ReferenceEquals",
        "Equals"
    };

    public string Refine(string name)
    {
        if(keywords.Contains(name))
            return "@" + name;
        if(used.Contains(name))
            return "_" + name;
        if(string.IsNullOrWhiteSpace(name))
            return GetRandomName("__");
        if(!isValidStartChar(name[0]))
            name = "_" + name;
        for(var i = 1; i < name.Length; i++)
        {
            if(!isValidPartChar(name[i]))
                name = name.Replace(name[i], '_');
        }
        return name;
    }

    private bool isValidStartChar(char ch)
    {
        return ch == '_' || isLetter(ch); 
    }

    private bool isValidPartChar(char ch)
    {
        var c = (int)char.GetUnicodeCategory(ch);
        return c == 5
            || c == 6
            || c == 8
            || c == 18
            || c == 15
            || isLetter(ch);
    }

    private bool isLetter(char ch)
    {
        var c = (int)char.GetUnicodeCategory(ch);
        return c < 5 || c == 9;
    }

    private Random ran = new Random();

    public string GetRandomName(string head)
    {
        return head + ran.Next();
    }
#>